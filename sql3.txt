# 데이터베이스 생성
CREATE DATABASE 'sqldb';

# 테이블 생성
CREATE TABLE 'dept' (
	'deptno' int,
	'dename' VARCHAR(14),
	'loc'	VARCHAR(13)
)

CREATE TABLE IF NOT EXISTS `emp` (
  `EMPNO` int NOT NULL,
  `ENAME` varchar(10) DEFAULT NULL,
  `JOB` varchar(9) DEFAULT NULL,
  `MGR` int DEFAULT NULL,
  `HIREDATE` date DEFAULT NULL,
  `SAL` int DEFAULT NULL,
  `COMM` int DEFAULT NULL,
  `DEPTNO` int DEFAULT NULL
)

CREATE TABLE IF NOT EXISTS `salgrade` (
  `grade` int DEFAULT NULL,
  `losal` int DEFAULT NULL,
  `hisal` int DEFAULT NULL
)

# 테이블 안에 값 넣기
INSERT INTO `dept` (`DEPTNO`, `DNAME`, `LOC`) VALUES
	(10, 'ACCOUNTING', 'NEW YORK'),
	(20, 'RESEARCH', 'DALLAS'),
	(30, 'SALES', 'CHICAGO'),
	(40, 'OPERATIONS', 'BOSTON'),
	(10, 'ACCOUNTING', 'NEW YORK'),
	(20, 'RESEARCH', 'DALLAS'),
	(30, 'SALES', 'CHICAGO'),
	(40, 'OPERATIONS', 'BOSTON');

INSERT INTO `emp` (`EMPNO`, `ENAME`, `JOB`, `MGR`, `HIREDATE`, `SAL`, `COMM`, `DEPTNO`) VALUES
	(7839, 'KING', 'PRESIDENT', NULL, '1981-11-17', 5000, NULL, 10),
	(7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01', 2850, NULL, 30),
	(7782, 'CLARK', 'MANAGER', 7839, '1981-05-09', 2450, NULL, 10),
	(7566, 'JONES', 'MANAGER', 7839, '1981-04-01', 2975, NULL, 20),
	(7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-10', 1250, 1400, 30),
	(7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-11', 1600, 300, 30),
	(7844, 'TURNER', 'SALESMAN', 7698, '1981-08-21', 1500, 0, 30),
	(7900, 'JAMES', 'CLERK', 7698, '1981-12-11', 950, NULL, 30),
	(7521, 'WARD', 'SALESMAN', 7698, '1981-02-23', 1250, 500, 30),
	(7902, 'FORD', 'ANALYST', 7566, '1981-12-11', 3000, NULL, 20),
	(7369, 'SMITH', 'CLERK', 7902, '1980-12-11', 800, NULL, 20),
	(7788, 'SCOTT', 'ANALYST', 7566, '1982-12-22', 3000, NULL, 20),
	(7876, 'ADAMS', 'CLERK', 7788, '1983-01-15', 1100, NULL, 20),
	(7934, 'MILLER', 'CLERK', 7782, '1982-01-11', 1300, NULL, 10);

INSERT INTO `salgrade` (`grade`, `losal`, `hisal`) VALUES
	(1, 700, 1200),
	(2, 1201, 1400),
	(3, 1401, 2000),
	(4, 2001, 3000),
	(5, 3001, 9999);

#1. 사원테이블 emp에서 사원번호 이름 월급만 출력하세요.
	SELECT empno,ename,sal FROM emp;

#2. 사원테이블의 모든 열을 출력하세요.
	SELECT * FROM emp;

#3. dept테이블의 모든 열을 출력하고 deptno를 한번 더 끝에 출력
	SELECT *,deptno FROM dept;

#4. 컬럼명 별명 사용하기 
    사원번호 사원이름 급여
	SELECT empno AS 사원번호, ename AS 사원이름, sal AS 급여
	FROM emp;

#5. 이름enma과 급여sal를 한 셀에 붙여서 표시하시오
	SELECT CONCAT(ename,' ',sal)
	FROM emp;

#6. ?님의 월급은 ?입니다. 열이름은 월급
	SELECT CONCAT(ename,'님의 월급은 ',sal,'입니다.') AS 월급
	FROM emp;

# 중복 제거
emp테이블에서 job을 중복을 제거하여 출력
	SELECT DISTINCT job
	FROM emp;

#7. 정렬 
emp테이블에서 이름, 부서번호, 월급을 부서번호 오름차순, 월급은 내림차순
	SELECT ename, deptno, sal
	FROM emp
	ORDER BY deptno ASC, sal DESC;

	SELECT ename, deptno, sal
	FROM emp
	ORDER BY 2 ASC, 3 DESC;

#8. 조건(WHERE)
emp테이블에서 이름, 부서번호, 월급을 출력하는데 월급이 3000인사람만 출력


#9. 입사일이 82년 12월 22일인 사람을 출력하세요
	SELECT ename
	FROM emp
	WHERE hiredate = '1982-12-22';

#10. 연봉이 36000 이상인 사원들의 이름과 연봉을 출력하세요. (ORDER BY 절에서는 별명을 사용할 수 있지만 WHERE절에서는 별명을 사용할 수 없다.)
	SELECT ename AS 사원이름 ,sal*12 AS 연봉
	FROM emp
	WHERE sal*12 >= 36000;

#11. between and 월급이 1000에서 3000사이인 사원들의 이름과 월급을 출력하세요

	SELECT ename,sal
	FROM emp	
	WHERE sal BETWEEN 1000 AND 3000;

#12. LIKE 
이름에서 첫글자가 S로 시작하는 사원들의 이름과 월급을 출력하시오.
	SELECT ename,sal
	FROM emp
	WHERE ename LIKE 'S%';
%(와일드 카드) , 이 자리에 어떠한 글자 몇개가 와도 상관하지 않는다.

#13.
이름에서 두번째 글자가 M로 시작하는 사원들의 이름과 월급을 출력하시오.
	SELECT ename,sal
	FROM emp
	WHERE ename LIKE '_M%';

#14. 이메일 확인을 위해 @가 반드시 들어가는지 확인
	LIKE '%@%'


#15. NULL
데이터가 할당되지 않은 상태 , 알 수 없는 값이기 떄문에 = 연산자는 사용할 수 없다. IS NULL을 사용한다. , 0도 아니고 ' ' 아닌값
ORACLE 에서는 NVL , MYSQL에서는 IFNULL (NULL값을 어떠한 값으로 변경) NVL(열이름,치환값) IFNULL(열이름,치환값)
comm에서 NULL인 사원들만 출력
	SELECT ename,comm
	FROM emp
	WHERE comm IS NULL;

#16. IN
직업이 salesman, analyst, manager 인 사람들만 이름 월급 직업을 출력하세요.
	SELECT ename,sal,job
	FROM emp
	WHERE job IN('salesman','analyst','manager');

	SELECT ename,sal,job
	FROM emp
	WHERE job ='salesman'
	OR job = 'analyst'
	OR job = 'manager';

#17. 논리 연산 
직업이 salesman이고 월급이 1200이상인 사원들의 이름, 월급, 직원을 출력하세요.
	SELECT ename,sal,job
	FROM emp
	WHERE job ='salesman'
	AND sal >= 1200;


#18. 함수
단일행 함수 - 하나의 행을 입력받아 하나의 행을 반환

다중행 함수 - 여러개의 행을 입력 받아 하나의 행을 반환하는 함수

이름을 전부 대문자로 , 전부 소문자로 , 첫글자만 대문자로  
	SELECT UPPER(ename) AS 대문자, 
		LOWER(ename) AS 소문자 , 
		CONCAT(UPPER(LEFT(ename,1)),LOWER(SUBSTRING(ename,2))) AS 첫글자대문자
	FROM emp;

SUBSTRING MYSQL
SUBSTR ORACLE

#19. 문자열의 길이 갯수
이름을 출력하고 그 이름의 글자 갯수를 출력하세요.

SELECT ename AS 이름, LENGTH(ename) AS 길이 
FROM emp;

#20. REPLACE 
특정 철자를 다른 철자로 변경
이름에서 첫글자만 남기고 나머지는 전부 '*'로 변경

	SELECT REPLACE(ename,SUBSTRING(ename,2),'*') AS 보안이름, job AS 직업, sal AS 연봉
	FROM emp;


#21. 특정 철자를 N개로 채우기

이름과 월급을 출력하는데 월급의 자리수를 10개로 하고 월급을 출력하고 나머지 '*'로 채워서 출력

#22. 이름과 월급을 출력하는데 월급 100마다 ■로 표현해보세요.

	SELECT ename AS 이름, sal AS 월급, LPAD('■',ROUND(SAL/100),'■') AS 그림으로표현
	FROM emp;

round(sal/100)이 20이라면 전체 20자리를 확보한다. 20자리 중 '■'를 하나 출력하고
나머지 19자리에 '■'를 채워서 출력하여 20개를 최종 출력하게 된다.

# ROUND
반올림 - 기본은 소수점 아래 1자리에서 소수점 위로 반올림

소수점 위의 1의 자리에서 반올림
SELECT ename, ROUND(sal,-1)
FROM emp;

# TRUNC - ORACLE
  TRUNCATE - MYSQL

SELECT ename, TRUNCATE(sal,-3)
FROM emp;

#23. 사원번호가 홀수이면 1 짝수이면 0 을 출력하세요

사원번호 홀짝
	SELECT empno AS 사원번호, ename AS 이름 , MOD(empno,2) AS 홀짝
	FROM emp;

#24. 사원번호가 홀수인 사람만 출력

#25. 1의 배수인 사람과 6의 배수인 사람의 명단.
	SELECT empno AS 사원번호, ename AS 이름 
	FROM emp
	WHERE MOD(empno,6) = 0
	OR MOD(empno,2) = 0;


#25. 이름을 출력하고 입사일부터 오늘까지 총 몇 달을 근무 했는지 출력하세요.

	select ename 이름, hiredate 입사일, CURDATE()  AS 현재날짜 ,TIMESTAMPDIFF(MONTH,hiredate,CURDATE()) 근속월수
	FROM emp;

	select ename 이름, 
	hiredate 입사일, 
	CURDATE()  AS 현재날짜 ,
	TIMESTAMPDIFF(year,hiredate,CURDATE()) 근속년수,
	TIMESTAMPDIFF(month,hiredate,CURDATE()) 근속월수,
	TIMESTAMPDIFF(week,hiredate,CURDATE()) 근속주수,
	TIMESTAMPDIFF(day,hiredate,CURDATE()) 근무일수
	FROM emp;

CURDATE() = 현재 날짜를 월까지의 단위까지 표시
TIMESTAMPDIFF(표기할 단위[년,월,일],전날, 최근날) = 최근날에서 전날을 뺀 후 [년,월,일]단위로 표기
NOW() = 현재 날짜와 시간


INSERT INTO testdb VALUES (1,'우디',25);

INSERT INTO testdb (toy_id, toy_name) VALUES (2,'버즈');

입력 값을 생략하면 NULL 값이 들어가게 된다.

# 자동증가 AUTO_INCREMENT
1부터 증가하는 값을 자동으로 입력해준다.
INSERT에서는 열을 생략하고 입력한다.

*주의사항*
AUTO_INCREMENT으로 지정하는 열은 반드시 PRIMARY KEY로 지정해야만 한다.

CREATE TABLE testtb2 (
	toy_id INT AUTO_INCREMENT PRIMARY KEY,
	toy_name VARCHAR(4),
	age INT);

INSERT INTO testtb2 VALUES(NULL,'철수',22);
(AUTO_INCREMENT 값에는 NULL값을 집어넣는다.)

SELECT LAST_INSERT_ID();
(자동증가된 수가 얼마까지 증가 했는지 알 수 있다.)

ALTER TABLE testtb2 AUTO_INCREMENT = 100;
(testtb2 테이블에 있는 AUTO_INCREMENT의 값을 100부터 시작하도록 테이블 수정)

SET @@auto_increment_increment=3;
(AUTO_INCREMENT를 3씩 증가해라)


# 테이블의 값을 다른 테이블로 입력하기 

DESC sqldb.testtb2;

SELECT COUNT(*)
	FROM testtb2;
(testtb2에 데이터 갯수)

SELECT *
	FROM testtb2 LIMIT 3;
(testtb2에 3번째 까지만 출력)

CREATE TABLE testtb3 (NAME VARCHAR(5),age INT);
(testtb3 테이블 생성)

INSERT INTO testtb3
	SELECT toy_name, age FROM testtb2;
(testtb2에 있는 toy_name 과 age를 testtb3에 복사)



# UPDATE 데이터 수정

UPDATE testtb2
	SET toy_name = '서울'
	WHERE toy_name = '영희';
SELECT * FROM testtb2 WHERE toy_id = 1;

UPDATE testtb2
	SET toy_name = 'SL'
	WHERE toy_name = '서울';
SELECT * FROM testtb2 WHERE toy_id = 1;

UPDATE testtb3
	SET toy_name = '대구';
(이렇게 되면 한번에 모든게 '대구'로 바뀌기 떄문에 하지 않는다.


# DELETE 데이터 삭제

회원 탈퇴 






















































