# 데이터베이스 생성
CREATE DATABASE 'sqldb';

# 테이블 생성
CREATE TABLE 'dept' (
	'deptno' int,
	'dename' VARCHAR(14),
	'loc'	VARCHAR(13)
)

CREATE TABLE IF NOT EXISTS `emp` (
  `EMPNO` int NOT NULL,
  `ENAME` varchar(10) DEFAULT NULL,
  `JOB` varchar(9) DEFAULT NULL,
  `MGR` int DEFAULT NULL,
  `HIREDATE` date DEFAULT NULL,
  `SAL` int DEFAULT NULL,
  `COMM` int DEFAULT NULL,
  `DEPTNO` int DEFAULT NULL
)

CREATE TABLE IF NOT EXISTS `salgrade` (
  `grade` int DEFAULT NULL,
  `losal` int DEFAULT NULL,
  `hisal` int DEFAULT NULL
)

# 테이블 안에 값 넣기
INSERT INTO `dept` (`DEPTNO`, `DNAME`, `LOC`) VALUES
	(10, 'ACCOUNTING', 'NEW YORK'),
	(20, 'RESEARCH', 'DALLAS'),
	(30, 'SALES', 'CHICAGO'),
	(40, 'OPERATIONS', 'BOSTON'),
	(10, 'ACCOUNTING', 'NEW YORK'),
	(20, 'RESEARCH', 'DALLAS'),
	(30, 'SALES', 'CHICAGO'),
	(40, 'OPERATIONS', 'BOSTON');

INSERT INTO `emp` (`EMPNO`, `ENAME`, `JOB`, `MGR`, `HIREDATE`, `SAL`, `COMM`, `DEPTNO`) VALUES
	(7839, 'KING', 'PRESIDENT', NULL, '1981-11-17', 5000, NULL, 10),
	(7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01', 2850, NULL, 30),
	(7782, 'CLARK', 'MANAGER', 7839, '1981-05-09', 2450, NULL, 10),
	(7566, 'JONES', 'MANAGER', 7839, '1981-04-01', 2975, NULL, 20),
	(7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-10', 1250, 1400, 30),
	(7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-11', 1600, 300, 30),
	(7844, 'TURNER', 'SALESMAN', 7698, '1981-08-21', 1500, 0, 30),
	(7900, 'JAMES', 'CLERK', 7698, '1981-12-11', 950, NULL, 30),
	(7521, 'WARD', 'SALESMAN', 7698, '1981-02-23', 1250, 500, 30),
	(7902, 'FORD', 'ANALYST', 7566, '1981-12-11', 3000, NULL, 20),
	(7369, 'SMITH', 'CLERK', 7902, '1980-12-11', 800, NULL, 20),
	(7788, 'SCOTT', 'ANALYST', 7566, '1982-12-22', 3000, NULL, 20),
	(7876, 'ADAMS', 'CLERK', 7788, '1983-01-15', 1100, NULL, 20),
	(7934, 'MILLER', 'CLERK', 7782, '1982-01-11', 1300, NULL, 10);

INSERT INTO `salgrade` (`grade`, `losal`, `hisal`) VALUES
	(1, 700, 1200),
	(2, 1201, 1400),
	(3, 1401, 2000),
	(4, 2001, 3000),
	(5, 3001, 9999);

#1. 사원테이블 emp에서 사원번호 이름 월급만 출력하세요.
	SELECT empno,ename,sal FROM emp;

#2. 사원테이블의 모든 열을 출력하세요.
	SELECT * FROM emp;

#3. dept테이블의 모든 열을 출력하고 deptno를 한번 더 끝에 출력
	SELECT *,deptno FROM dept;

#4. 컬럼명 별명 사용하기 
    사원번호 사원이름 급여
	SELECT empno AS 사원번호, ename AS 사원이름, sal AS 급여
	FROM emp;

#5. 이름enma과 급여sal를 한 셀에 붙여서 표시하시오
	SELECT CONCAT(ename,' ',sal)
	FROM emp;

#6. ?님의 월급은 ?입니다. 열이름은 월급
	SELECT CONCAT(ename,'님의 월급은 ',sal,'입니다.') AS 월급
	FROM emp;

# 중복 제거
emp테이블에서 job을 중복을 제거하여 출력
	SELECT DISTINCT job
	FROM emp;

#7. 정렬 
emp테이블에서 이름, 부서번호, 월급을 부서번호 오름차순, 월급은 내림차순
	SELECT ename, deptno, sal
	FROM emp
	ORDER BY deptno ASC, sal DESC;

	SELECT ename, deptno, sal
	FROM emp
	ORDER BY 2 ASC, 3 DESC;

#8. 조건(WHERE)
emp테이블에서 이름, 부서번호, 월급을 출력하는데 월급이 3000인사람만 출력


#9. 입사일이 82년 12월 22일인 사람을 출력하세요
	SELECT ename
	FROM emp
	WHERE hiredate = '1982-12-22';

#10. 연봉이 36000 이상인 사원들의 이름과 연봉을 출력하세요. (ORDER BY 절에서는 별명을 사용할 수 있지만 WHERE절에서는 별명을 사용할 수 없다.)
	SELECT ename AS 사원이름 ,sal*12 AS 연봉
	FROM emp
	WHERE sal*12 >= 36000;

#11. between and 월급이 1000에서 3000사이인 사원들의 이름과 월급을 출력하세요

	SELECT ename,sal
	FROM emp	
	WHERE sal BETWEEN 1000 AND 3000;

#12. LIKE 
이름에서 첫글자가 S로 시작하는 사원들의 이름과 월급을 출력하시오.
	SELECT ename,sal
	FROM emp
	WHERE ename LIKE 'S%';
%(와일드 카드) , 이 자리에 어떠한 글자 몇개가 와도 상관하지 않는다.

#13.
이름에서 두번째 글자가 M로 시작하는 사원들의 이름과 월급을 출력하시오.
	SELECT ename,sal
	FROM emp
	WHERE ename LIKE '_M%';

#14. 이메일 확인을 위해 @가 반드시 들어가는지 확인
	LIKE '%@%'


#15. NULL
데이터가 할당되지 않은 상태 , 알 수 없는 값이기 떄문에 = 연산자는 사용할 수 없다. IS NULL을 사용한다. , 0도 아니고 ' ' 아닌값
ORACLE 에서는 NVL , MYSQL에서는 IFNULL (NULL값을 어떠한 값으로 변경) NVL(열이름,치환값) IFNULL(열이름,치환값)
comm에서 NULL인 사원들만 출력
	SELECT ename,comm
	FROM emp
	WHERE comm IS NULL;

#16. IN
직업이 salesman, analyst, manager 인 사람들만 이름 월급 직업을 출력하세요.
	SELECT ename,sal,job
	FROM emp
	WHERE job IN('salesman','analyst','manager');

	SELECT ename,sal,job
	FROM emp
	WHERE job ='salesman'
	OR job = 'analyst'
	OR job = 'manager';

#17. 논리 연산 
직업이 salesman이고 월급이 1200이상인 사원들의 이름, 월급, 직원을 출력하세요.
	SELECT ename,sal,job
	FROM emp
	WHERE job ='salesman'
	AND sal >= 1200;


#18. 함수
단일행 함수 - 하나의 행을 입력받아 하나의 행을 반환

다중행 함수 - 여러개의 행을 입력 받아 하나의 행을 반환하는 함수

이름을 전부 대문자로 , 전부 소문자로 , 첫글자만 대문자로  
	SELECT UPPER(ename) AS 대문자, 
		LOWER(ename) AS 소문자 , 
		CONCAT(UPPER(LEFT(ename,1)),LOWER(SUBSTRING(ename,2))) AS 첫글자대문자
	FROM emp;

SUBSTRING MYSQL
SUBSTR ORACLE

#19. 문자열의 길이 갯수
이름을 출력하고 그 이름의 글자 갯수를 출력하세요.

SELECT ename AS 이름, LENGTH(ename) AS 길이 
FROM emp;

#20. REPLACE 
특정 철자를 다른 철자로 변경
이름에서 첫글자만 남기고 나머지는 전부 '*'로 변경

	SELECT REPLACE(ename,SUBSTRING(ename,2),'*') AS 보안이름, job AS 직업, sal AS 연봉
	FROM emp;


#21. 특정 철자를 N개로 채우기

이름과 월급을 출력하는데 월급의 자리수를 10개로 하고 월급을 출력하고 나머지 '*'로 채워서 출력

#22. 이름과 월급을 출력하는데 월급 100마다 ■로 표현해보세요.

	SELECT ename AS 이름, sal AS 월급, LPAD('■',ROUND(SAL/100),'■') AS 그림으로표현
	FROM emp;

round(sal/100)이 20이라면 전체 20자리를 확보한다. 20자리 중 '■'를 하나 출력하고
나머지 19자리에 '■'를 채워서 출력하여 20개를 최종 출력하게 된다.

# ROUND
반올림 - 기본은 소수점 아래 1자리에서 소수점 위로 반올림

소수점 위의 1의 자리에서 반올림
SELECT ename, ROUND(sal,-1)
FROM emp;

# TRUNC - ORACLE
  TRUNCATE - MYSQL

SELECT ename, TRUNCATE(sal,-3)
FROM emp;

#23. 사원번호가 홀수이면 1 짝수이면 0 을 출력하세요

사원번호 홀짝
	SELECT empno AS 사원번호, ename AS 이름 , MOD(empno,2) AS 홀짝
	FROM emp;

#24. 사원번호가 홀수인 사람만 출력

#25. 1의 배수인 사람과 6의 배수인 사람의 명단.
	SELECT empno AS 사원번호, ename AS 이름 
	FROM emp
	WHERE MOD(empno,6) = 0
	OR MOD(empno,2) = 0;


#25. 이름을 출력하고 입사일부터 오늘까지 총 몇 달을 근무 했는지 출력하세요.

	select ename 이름, hiredate 입사일, CURDATE()  AS 현재날짜 ,TIMESTAMPDIFF(MONTH,hiredate,CURDATE()) 근속월수
	FROM emp;

	select ename 이름, 
	hiredate 입사일, 
	CURDATE()  AS 현재날짜 ,
	TIMESTAMPDIFF(year,hiredate,CURDATE()) 근속년수,
	TIMESTAMPDIFF(month,hiredate,CURDATE()) 근속월수,
	TIMESTAMPDIFF(week,hiredate,CURDATE()) 근속주수,
	TIMESTAMPDIFF(day,hiredate,CURDATE()) 근무일수
	FROM emp;

CURDATE() = 현재 날짜를 월까지의 단위까지 표시
TIMESTAMPDIFF(표기할 단위[년,월,일],전날, 최근날) = 최근날에서 전날을 뺀 후 [년,월,일]단위로 표기
NOW() = 현재 날짜와 시간


INSERT INTO testdb VALUES (1,'우디',25);

INSERT INTO testdb (toy_id, toy_name) VALUES (2,'버즈');

입력 값을 생략하면 NULL 값이 들어가게 된다.

# 자동증가 AUTO_INCREMENT
1부터 증가하는 값을 자동으로 입력해준다.
INSERT에서는 열을 생략하고 입력한다.

*주의사항*
AUTO_INCREMENT으로 지정하는 열은 반드시 PRIMARY KEY로 지정해야만 한다.

CREATE TABLE testtb2 (
	toy_id INT AUTO_INCREMENT PRIMARY KEY,
	toy_name VARCHAR(4),
	age INT);

INSERT INTO testtb2 VALUES(NULL,'철수',22);
(AUTO_INCREMENT 값에는 NULL값을 집어넣는다.)

SELECT LAST_INSERT_ID();
(자동증가된 수가 얼마까지 증가 했는지 알 수 있다.)

ALTER TABLE testtb2 AUTO_INCREMENT = 100;
(testtb2 테이블에 있는 AUTO_INCREMENT의 값을 100부터 시작하도록 테이블 수정)

SET @@auto_increment_increment=3;
(AUTO_INCREMENT를 3씩 증가해라)


# 테이블의 값을 다른 테이블로 입력하기 

DESC sqldb.testtb2;

SELECT COUNT(*)
	FROM testtb2;
(testtb2에 데이터 갯수)

SELECT *
	FROM testtb2 LIMIT 3;
(testtb2에 3번째 까지만 출력)

CREATE TABLE testtb3 (NAME VARCHAR(5),age INT);
(testtb3 테이블 생성)

INSERT INTO testtb3
	SELECT toy_name, age FROM testtb2;
(testtb2에 있는 toy_name 과 age를 testtb3에 복사)



# UPDATE 데이터 수정

UPDATE testtb2
	SET toy_name = '서울'
	WHERE toy_name = '영희';
SELECT * FROM testtb2 WHERE toy_id = 1;

UPDATE testtb2
	SET toy_name = 'SL'
	WHERE toy_name = '서울';
SELECT * FROM testtb2 WHERE toy_id = 1;

UPDATE testtb3
	SET toy_name = '대구';
(이렇게 되면 한번에 모든게 '대구'로 바뀌기 떄문에 하지 않는다.


# DELETE 데이터 삭제

회원 탈퇴 

================================================================================================================

SELECT ~ FROM (~WHERE)
테이블에서 데이터를 추출하는 기능
추출만 할 뿐 실제 데이터베이스의 내용을 변경되지 않는다.

sever connect workbench sample

workbench 에서든 database를 schemas라고 한다.

SELECT * FROM shop.member;

테이블명 product
product_name CHAR(4) PK NN
cost INT NN
make_date 
company CHAR(5) 
amount INT NN

CREATE TABLE `shop`.`product` (
  `product_name` CHAR(4) NOT NULL,
  `cost` INT NOT NULL,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL,
  PRIMARY KEY (`product_name`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

데이터 삽입
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('tess', '나훈아', '경기 부천');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('hero', '임영웅', '서울 은평');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('iyou', '아이유', '인천 남구');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('jyp', '박진영', '경기 고양');

데이터 수정
UPDATE `shop`.`member` SET `member_addr` = '서울 강남' WHERE (`member_id` = 'hero');

데이터 삭제
DELETE FROM `shop`.`member` WHERE (`member_id` = 'jyp');

특정 데이터만 볼 때
SELECT member_name, member_addr FROM shop.member;



# market_db

DROP DATABASE IF EXISTS market_db; -- 만약 market_db가 존재하면 우선 삭제한다.
CREATE DATABASE market_db; --market_db 데이터베이스를 만든다.

USE market_db;		--market_db를 사용하겠다.
CREATE TABLE member -- 회원 테이블
( mem_id  		CHAR(8) NOT NULL PRIMARY KEY, -- 사용자 아이디(PK)
  mem_name    	VARCHAR(10) NOT NULL, -- 이름
  mem_number    INT NOT NULL,  -- 인원수
  addr	  		CHAR(2) NOT NULL, -- 지역(경기,서울,경남 식으로 2글자만입력)
  phone1		CHAR(3), -- 연락처의 국번(02, 031, 055 등)
  phone2		CHAR(8), -- 연락처의 나머지 전화번호(하이픈제외)
  height    	SMALLINT,  -- 평균 키
  debut_date	DATE  -- 데뷔 일자
);
CREATE TABLE buy -- 구매 테이블
(  num 		INT AUTO_INCREMENT NOT NULL PRIMARY KEY, -- 순번(PK)
   mem_id  	CHAR(8) NOT NULL, -- 아이디(FK)
   prod_name 	CHAR(6) NOT NULL, --  제품이름
   group_name 	CHAR(4)  , -- 분류
   price     	INT  NOT NULL, -- 가격
   amount    	SMALLINT  NOT NULL, -- 수량
   FOREIGN KEY (mem_id) REFERENCES member(mem_id)
);

INSERT INTO member VALUES('TWC', '트와이스', 9, '서울', '02', '11111111', 167, '2015.10.19');
INSERT INTO member VALUES('BLK', '블랙핑크', 4, '경남', '055', '22222222', 163, '2016.08.08');
INSERT INTO member VALUES('WMN', '여자친구', 6, '경기', '031', '33333333', 166, '2015.01.15');
INSERT INTO member VALUES('OMY', '오마이걸', 7, '서울', NULL, NULL, 160, '2015.04.21');
INSERT INTO member VALUES('GRL', '소녀시대', 8, '서울', '02', '44444444', 168, '2007.08.02');
INSERT INTO member VALUES('ITZ', '잇지', 5, '경남', NULL, NULL, 167, '2019.02.12');
INSERT INTO member VALUES('RED', '레드벨벳', 4, '경북', '054', '55555555', 161, '2014.08.01');
INSERT INTO member VALUES('APN', '에이핑크', 6, '경기', '031', '77777777', 164, '2011.02.10');
INSERT INTO member VALUES('SPC', '우주소녀', 13, '서울', '02', '88888888', 162, '2016.02.25');
INSERT INTO member VALUES('MMU', '마마무', 4, '전남', '061', '99999999', 165, '2014.06.19');

INSERT INTO buy VALUES(NULL, 'BLK', '지갑', NULL, 30, 2);
INSERT INTO buy VALUES(NULL, 'BLK', '맥북프로', '디지털', 1000, 1);
INSERT INTO buy VALUES(NULL, 'APN', '아이폰', '디지털', 200, 1);
INSERT INTO buy VALUES(NULL, 'MMU', '아이폰', '디지털', 200, 5);
INSERT INTO buy VALUES(NULL, 'BLK', '청바지', '패션', 50, 3);
INSERT INTO buy VALUES(NULL, 'MMU', '에어팟', '디지털', 80, 10);
INSERT INTO buy VALUES(NULL, 'GRL', '혼공SQL', '서적', 15, 5);
INSERT INTO buy VALUES(NULL, 'APN', '혼공SQL', '서적', 15, 2);
INSERT INTO buy VALUES(NULL, 'APN', '청바지', '패션', 50, 1);
INSERT INTO buy VALUES(NULL, 'MMU', '지갑', NULL, 30, 1);
INSERT INTO buy VALUES(NULL, 'APN', '혼공SQL', '서적', 15, 1);
INSERT INTO buy VALUES(NULL, 'MMU', '지갑', NULL, 30, 4);

SELECT * FROM member;
SELECT * FROM buy;

# 데이터 변경
INSERT - 데이터 삽입
INSERT INTO emp VALUES(1,'wood',25);

UPDATE - 데이터 변경
UPDATE market_db.member
	SET mem_name = 'Apink'
    WHERE mem_name = '에이핑크'
    ;

DELETE - 데이터 삭제
DELETE
	FROM emp
    WHERE emp_id = 1;

# emp 테이블 생성
CREATE TABLE emp(
	emp_id INT,
    emp_name CHAR(4),
    age INT
    );

# 총 개수
SELECT last_insert_id()




11:54:38	UPDATE market_db.member  SET mem_name = "Apink"  WHERE mem_name = "에이핑크"	Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column.  To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.	0.000 sec


TINYINT -128 ~ 127
SMALLINT -32,768 ~ 32,767
INT -21억 ~ 21억
BIGINT -900경 ~ 900경


CHAR 	 1 ~ 255글자 	고정길이 자리수가 고정
	CHAR(10) 'abc' 10개를 일단 모두 확보 후 3개 사용 7개 자리는 낭비
VARCHAR 1 ~ 16,000(?)글자	가변길이 문자형
	VARCHAR(10) 'abc' 3자리만 사용

-----------------------------------------------------------------------------------------------------------------------	
join 은 두개의 테이블을 서로 묶어서 하나의 결과를 만드는 것

마켓 데이터베이스에서 회원테이블과 구매테이블 

일대 다 관계 -one to many
테이블은 하나로 구성되는 것보다 여러 정보를 주제에 따라 분리하여 저장하는 것이 효율적이다.
이 분리된 테이블은 서로 관계를 맺고 있다.

market_db는 회원테이블의 아이디와 구매테이블의 아이디가 일대다 관계이다.
일대 다 관계란 한쪽 테이블에는 하나의 값만 존재 하지만 연결된 다른 테이블에는 여러개의 값이 존재할 수 있는 관계를 말한다.
즉, 한명의 회원이 구매를 여러번 할 수 있다.
**구매 테이블의 아이디는 기본키가 아닌 외래키 FOREIGN KEY로 설정해야 한다.**

일대 다 관계는 주로 기본키와 외래키로 관계를 맺는다.
일대 다 관계를 또 다른 표현으로 'PK - FK 관계'라고 부르기도 한다.

회사원 테이블과 - 급여 테이블
학생 테이블과 - 성적 테이블
제품 테이블과 - 판매 테이블

# 우리 사이트에서 한번이라도 구매한 기록이 있는 회원들에게 감사선물을 제공하려 한다.

한번이상 구매한 모든 회원의 정보를 출력하시오.

SELECT [열들의 목록 *]
FROM [1 테이블]
	INNER JOIN [2 테이블]
	ON [조인 조건]
[WHERE 검색 조건]

구매 테이블에는 물건을 구매한 회원의 아이디와 물건의 정보만 있다.
이 물건의 구매자에 대한 정보는 회원테이블에 있기 때문에 결합하는 것이 조인이다.
구매 테이블에서 어떤 아이디를 가진 사람의 정보를 얻기 워해서는 다음과 같이 검색할 수 있다.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

# 외부 조인
내부조인은 두 테이블에 모두 데이터가 있어야만 결과가 나온다. 
외부조인은 한쪽만 데이터가 있어도 결과가 나온다.

두 테이블을 조인할 때 필요한 내용이 한쪽 테이블에만 있어도 결과를 추출할 수 있다.


SELECT [열들의 목록 *]
FROM [1 테이블]
	[LEFT/RIGHT/FULL] OUTER JOIN [2 테이블]
	ON [조인 조건]
[WHERE 검색 조건]

LEFT OUTER JOIN 
왼쪽 테이블의 내용은 모두 출력되어야 한다.

SELECT B.mem_id , M.mem_name,M.addr
FROM member M
LEFT OUTER JOIN buy B
ON B.mem_id = M.mem_id
;

# 회원으로 가입만 하고 한번도 구매한적이 없는 회원의 목록 출력
hint : 한번도 구매하지 않았기 때문에 조인된 결과의 물건이름은 비어있을 것이다.

SELECT M.mem_id , M.mem_name,M.addr, B.prod_name
FROM member M
LEFT OUTER JOIN buy B
ON B.mem_id = M.mem_id
WHERE B.prod_name is NULL
;

# 제약 조건

PIRMARY KEY
FOREIGN KEY
UNIQUE
CHECK
DEFAULT
NULL

테이블은 기본키, 외래키와 같은 제약조건을 설정할 수 있다.
제약 조건은 테이블을 구성하는 핵심개념으로 잘 활용하면 오류를 줄여 완전한 코드를 만들 수 있다.

테이블을 만들 때 구조에 필요한 제약 조건을 설정한다.
기본키와 외래키가 대표적인 제약 조건이다.
기본키는 학번, 사번, 주민번호등과 같은 고유한 데이터를 의미하는 열에 설정하고
외래키는 기본키와 연결되는 열에 저장한다.

고유키 PK(PRIMARY KEY) 는 중복되지 않는 열에 지정한다.

만약에 키를 입력하는 열에는 300cm를 넘는 사람은 없다.
실수로 300이 넘는 값을 입력하는 것을 방지하는 제약조건을 체크 check 라고 한다.
또 국적을 입력하는데 대부분이 한국인데 매번 입력하기가 귀찮다면 제약조건으로 기본값을 설정할 수 있다.
값을 반드시 꼭 입력해야 하게 만드는 제약조건을 NOT NULL 제약조건이라 한다.

제약조건이 많으면 데이터의 오류가 적고 튼튼해진다.

CONSTRAINT은  데이터의 무결성(결함이 없음)을 유지하기 위해 제한하는 조건이다.

이러한 결함을 미리 방지하기 위해 회원테이블의 아이디를 기본키 PRIMARY KEY로 지정하면
'중복을 허용하지 않고 NULL값도 허용하지 않음'으로 설정되어 실수로 중복된 아이디를 넣으려고 하면
입력조차 불가능해진다.

# 기본키 제약 조건
대부분의 테이블은 기본키를 가져야 한다. 
없어도 테이블 구성은 가능하지만 실무에서는 기본키를 설정해야 중복된 값을 허용하지 않게 된다.
기본키는 테이블마다 1개만 가질 수 있다.
아이디, 주민번호, 이메일 3개다 고유번호를 가져야 할 때에는
테이블의 특성을 가장 잘 반영하는 열을 선택하는 것이 좋다.

열 이름 뒤에 PRIMARY KEY를 붙여 기본키로 설정한다.

CREATE TABLE member(
	product_name CHAR(4) PRIMARY KEY,
	cost INT ,
	make_date DATE,
	company CHAR(5) ,
	amount INT 
	);

또는

구문 제일 아래에서 PRIMARY KEY를 설정
CREATE TABLE member(
	product_name CHAR(4) PRIMARY KEY,
	cost INT ,
	make_date DATE,
	company CHAR(5) ,
	amount INT 
	PRIMARY KEY(product_name)
	);

또는

테이블을 만든 후 ALTER를 이용하여 PRIMARY KEY 설정

ALTER TABEL mamber;
	ADD CONSTRAINT
	PRIMARY KEY (member_id);


CREATE TABLE member(
	product_name CHAR(4) PRIMARY KEY,
	cost INT ,
	make_date DATE,
	company CHAR(5) ,
	amount INT 
	CONSTRAINT PRIMARY PK_MEMBER_MEM_ID(mem_id)
	);

# 외래키 FOREIGN KEY
외래키 제약조건은 두 테이블 사이의 관계를 연결해 주고
그 결과 데이터의 무결성을 보장해주는 역할을 한다.
외래키가 설정된 열은 반드시 다른 테이블의 기본키와 동일하다.

기본키가 있는 테이블을 '기준테이블' 외래키가 있는 테이블은 '참조 테이블'이라고 부른다.

	기준테이블	참조테이블
	  아이디		   아이디
	    PK		      FK

참조 테이블이 참조하는 기준 테이블의 열은 반드시 기본키 또는 고유키로 설정되어 있어야 한다.

외래키 설정 방법

CREATE TABLE member(
	product_name CHAR(4) PRIMARY KEY,
	cost INT ,
	make_date DATE,
	company CHAR(5) ,
	amount INT 
	FOREIGN KEY(product_name) REFERENCES member(mem_id)
	);

또는

CREATE TABLE member(
	product_name CHAR(4) PRIMARY KEY,
	cost INT ,
	make_date DATE,
	company CHAR(5) ,
	amount INT 
	);

ALTER TABLE member
	ADD CONSTRAINT
	FOREIGN KEY(product_name)
	REFERENCES memmber(mem_id);

기본키 - 외래키 관계가 설정되면
기준 테이블의 열은 변경되거나 삭제되지 않는다.

기준테이블의 열 이름이 변경될 때 참조 테이블의 열 이름도 자동으로 변경되면
더 효율적일것 같다.
즉, 회원테이블의 BLK가 PINK로 변경되면 자동으로 구매테이블의 BLK도 PINK로 변경되는 것이다.

-----------------------------------------------------------------------------------------------------------------------
# 테이블들의 관계를 그림으로 보기
DATABASE -> REVERSE Engineer
-----------------------------------------------------------------------------------------------------------------------

고유키 제약조건 Unique
중복되지 않는 유일한 값을 입력해야 하는 조건

# Unique 설정 방법

열이름 끝에 설정
CREATE TABLE member(
	product_name 	CHAR(4) PRIMARY KEY,
	cost 		INT ,
	make_date 	DATE,
	company 	CHAR(5)  UNIQUE,
	amount 		INT 
	);

Check 제약 조건
입력할 때 데이터를 점검하는 기능,
어떤 열에 특정 값이 들어가지 않도록 하거나 '남/여' 둘중의 하나만 입력되도록 할 수 있다.

# Check 설정 방법

열이름 끝에 설정
CREATE TABLE member(
	product_name 	CHAR(4) PRIMARY KEY,
	cost 		INT ,
	make_date 	DATE,
	company 	CHAR(5)  UNIQUE,
	amount 		INT, 
	gender 		CHAR(5) CHECK( gender IN('남','여') ),
	height		TINYINT CHECK(height >= 100)
	);


구문 아래에 설정
CREATE TABLE member(
	product_name 	CHAR(4) PRIMARY KEY,
	cost 		INT ,
	make_date 	DATE,
	company 	CHAR(5)  UNIQUE,
	amount 		INT, 
	gender 		CHAR(5) ,
	height		TINYINT 
	);

ALTER TABLE member
	ADD CONSTRAINT
	CHECK( gender IN('남','여') )
	CHECK(height >= 100)


# 기본값 DEFAULT
값을 입력하지 않았을 때 자동으로 입력될 값을 미리 지정해 놓는 방법이다.

CREATE TABLE member(
	product_name 	CHAR(4) PRIMARY KEY,
	cost 		INT ,
	make_date 	DATE,
	company 	CHAR(5)  DEFAULT '용감한형제들',
	amount 		INT, 
	gender 		CHAR(5) ,
	height		TINYINT
	);

company에 아무것도 입력하지 않았을 때 '용감한형제들'이라는 값이 들어간다.

또는

테이블을 만들고 난 뒤에 제약조건 설정
CREATE TABLE member(
	product_name 	CHAR(4) PRIMARY KEY,
	cost 		INT ,
	make_date 	DATE,
	company 	CHAR(5)  ,
	amount 		INT, 
	gender 		CHAR(5) ,
	height		TINYINT
	);

ALTER TABLE member 
	ALTER COLUMN company SET DEFAULT '용감한형제들'

ALTER TABLE emp
	ALTER COLUMN age SET DEFAULT 20;
emp 테이블에 있는 age에 아무것도 입력하지 않으면 20이 자동으로 입력되어 들어간다.

# 널 값 허용 NOT NULL

CREATE TABLE member(
	product_name 	CHAR(4) PRIMARY KEY,
	cost 		INT  NOT NULL,
	make_date 	DATE,
	company 	CHAR(5)  ,
	amount 		INT, 
	gender 		CHAR(5) ,
	height		TINYINT
	);


# VIEW 가상의 테이블 
일반 사용자의 입장에서는 테이블과 동일하게 보인다.
그렇다면 왜 뷰를 사용할까...?
테이블의 필요한 내용만 골라서 보이도록 할 수 있다.

뷰는 테이블과 아주 밀접하게 연관되어 있다. 
뷰는 한번 생성하면 테이블이라고 생각해도 될 정도로 테이블과 동일한 개체로 취급한다.

뷰는 실제 데이터를 가지고 있지 않다.
뷰에 접근하는 순간 SELECT 가 실행되고 그 결과가 화면에 출력되는 방식이다.
뷰는 단순 뷰와 복합 뷰로 나뉜다.
단순 뷰는 하나의 테이블과 연관된 뷰를 의미하고
복합 뷰는 2개 이상의 테이블과 연관된 뷰를 말한다.

뷰의 이름만 보고서도 어떤 테이블과 연계된 뷰인지 알 수 있도록 v_접두어를 사용하여 이름을 만든다.
v_테이블명

CREATE VIEW v_이름
AS
	SELECT 구문;

CREATE VIEW v_member
AS
		SELECT mem_id, mem_name,addr
		FROM market_db.member;

필요한 열만 추출하여 보거나 조건식을 넣을 수도 있다.
결과는 테이블에서 추출하여 보는것과 동일하다.

뷰를 많이 사용하게 되는 이유

1. 보안 Security

인터넷 홈쇼핑, 회원의 정보 확인등등
알바가 모든 정보가 담긴 테이블을 전부 사용할 수 있도록하면 위험함으로
일부 정보에만 접근을 허용하여 불필요한 정보 노출을 방지할 수 있다.

2. 복잡한 SQL을 단순하게 만들 수 있다.

뷰 작성시 조건을 사용하게 되면 그 뷰를 통한 또 다른 SQL 구문은 좀 더 단순해지는 효과를 얻을 수 있다.

뷰의 실제 사용
실무에서는 좀 더 복잡하게 사용된다.

CREATE VIEW v_viewtest1
AS
	SELECT B.mem_id 'Member ID', M.mem_name 'Member Name',
				B.prod_name 'Product Name',
                CONCAT(M.phone1,M.phone2) 'Office Phone'
    FROM buy B
		INNER JOIN member M
        ON B.mem_id = M.mem_id;
        
    SELECT DISTINCT `Member ID`,`Member Name`  FROM v_viewtest1;

뷰를 작성한 뒤에 뷰안에 있는 내용중 찾아서 나타낸다.

# 뷰 삭제
뷰를 삭제할 때에는 DROP View 뷰이름 을 사용한다
DROP View v_member;

# 뷰 구조
뷰 구조를 보고싶을 때에는 describe 뷰이름 을 사용한다.
describe v_viewtest1

# 뷰 소스 보기
SHOW CREATE VIEW v_viewtest1;


# 뷰로 데이터 수정/삭제
UPDATE v_viewtest1 SET `Member Name`  = 'Black Pink'
WHERE `Member Name` = '블랙핑크';

뷰의 열이름은 '' 가 아닌 ``를 사용한다.

DELETE 
	FROM v_viewtest1
    WHERE `Member ID` = 'apn';
뷰를 삭제할 때에는 기본 문법 그대로 사용하면 된다.

















































































































































































































































































































































































